---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCluster
metadata:
  name: trino
spec:
  image:
    productVersion: "439"
  clusterConfig:
    listenerClass: external-unstable
    tls:
      serverSecretClass: tls
    catalogLabelSelector:
      matchLabels:
        trino: trino
    authentication:
      - authenticationClass: trino-superset-user-for-impersonation
      - authenticationClass: keycloak
        oidc:
          clientCredentialsSecret: trino-keycloak-client
    authorization:
      opa:
        configMapName: opa
        package: trino
  coordinators:
    podOverrides: &podOverrides
      spec:
        containers:
          - name: trino
            env:
              - name: KERBEROS_REALM
                value: KNAB.COM
            volumeMounts:
              - name: kerberos
                mountPath: /stackable/kerberos
              # Normally we would use a different location and set `-Djava.security.krb5.conf=/example/path/krb5.conf`,
              # but we can not influence the JVM arguments.
              - name: kerberos
                mountPath: /etc/krb5.conf
                subPath: krb5.conf
        volumes:
          - name: kerberos
            ephemeral:
              volumeClaimTemplate:
                metadata:
                  annotations:
                    secrets.stackable.tech/class: kerberos
                    secrets.stackable.tech/kerberos.service.names: trino
                    secrets.stackable.tech/scope: service=trino
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: "1"
                  storageClassName: secrets.stackable.tech
    roleGroups:
      default:
        replicas: 1
  workers:
    podOverrides: *podOverrides
    roleGroups:
      default:
        replicas: 1
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: lakehouse
  labels:
    trino: trino
spec:
  connector:
    iceberg:
      metastore:
        configMap: hive-iceberg
      hdfs:
        configMap: hdfs
  configOverrides:
    # hive.iceberg-catalog-name: iceberg
    # HDFS configuration
    hive.hdfs.authentication.type: KERBEROS
    hive.hdfs.trino.principal: trino/trino.default.svc.cluster.local@KNAB.COM
    hive.hdfs.trino.keytab: /stackable/kerberos/keytab
    hive.hdfs.impersonation.enabled: "false"
    hive.hdfs.wire-encryption.enabled: "false"
    # HMS configuration
    hive.metastore.authentication.type: KERBEROS
    hive.metastore.client.principal: trino/trino.default.svc.cluster.local@KNAB.COM
    hive.metastore.client.keytab: /stackable/kerberos/keytab
    hive.metastore.service.principal: hive/hive-iceberg.default.svc.cluster.local@KNAB.COM
    hive.metastore.thrift.impersonation.enabled: "false"
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: tpcds
  labels:
    trino: trino
spec:
  connector:
    tpcds: {}
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: tpch
  labels:
    trino: trino
spec:
  connector:
    tpch: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: trino-keycloak-client
stringData:
  clientId: trino
  clientSecret: "{{ keycloakTrinoClientSecret }}"
---
apiVersion: authentication.stackable.tech/v1alpha1
kind: AuthenticationClass
metadata:
  name: trino-superset-user-for-impersonation
spec:
  provider:
    static:
      userCredentialsSecret:
        name: trino-superset-user
---
apiVersion: v1
kind: Secret
metadata:
  name: trino-superset-user
type: kubernetes.io/opaque
stringData:
  superset: "{{ trinoSupersetUserPassword }}"
