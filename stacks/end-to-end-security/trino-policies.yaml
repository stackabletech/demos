---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-policies
  labels:
    opa.stackable.tech/bundle: trino
data:
  trino_policies.rego: |
    package trino_policies

    import rego.v1

    policies := {
      "catalogs": [
        # Needed to bootstrap schemas and tables
        {
          "user": "data-import",
          "catalog": "lakehouse",
          "allow": "all",
        },
        {
          "user": "data-import",
          "catalog": "tpcds",
          "allow": "read-only",
        },
        # Everyone can read from lakehouse
        {
          "catalog": "lakehouse",
          "allow": "read-only",
        },
        # Needed for JDBC clients
        {
          "catalog": "system",
          "allow": "read-only",
        },
      ],
      "schemas": [
        # We don't need to grant schema ownership, as users don't need to CRUD schemas.
        # Needed to bootstrap schemas and tables
        {
          "user": "data-import",
          "catalog": "lakehouse",
          "owner": true,
        },
      ],
      "tables": [
        {
          "group": "/Compliance and Regulation/Analytics",
          "catalog": "lakehouse",
          "schema": "compliance_analytics",
          "privileges": ["SELECT", "INSERT", "DELETE", "UPDATE", "OWNERSHIP", "GRANT_SELECT"],
        },
        {
          "group": "/Customer Service/Analytics",
          "catalog": "lakehouse",
          "schema": "customer_analytics",
          "privileges": ["SELECT", "INSERT", "DELETE", "UPDATE", "OWNERSHIP", "GRANT_SELECT"],
        },
        {
          "group": "/Marketing",
          "catalog": "lakehouse",
          "schema": "marketing",
          "privileges": ["SELECT", "INSERT", "DELETE", "UPDATE", "OWNERSHIP", "GRANT_SELECT"],
        },
        {
          "group": "/Compliance and Regulation/Analytics",
          "catalog": "lakehouse",
          "schema": "customer_analytics",
          "table": "customer",
          "privileges": ["SELECT"],
          "columns" : [
            {
              "name": "c_first_name",
              "allow": false,
            },
            {
              "name": "c_last_name",
              "allow": false,
            },
            {
              "name": "c_birth_day",
              "allow": false,
            },
            {
              "name": "c_birth_month",
              "allow": false,
            },
            {
              "name": "c_customer_id",
              "mask": "to_hex(sha256(to_utf8(c_customer_id)))",
            },
            {
              "name": "c_email_address",
              "mask": "regexp_replace(c_email_address, '([^@]{1,3})([^@]+)@', '$1---@')",
            },
          ]
        },
        # Needed to bootstrap schemas and tables
        {
          "user": "data-import",
          "catalog": "lakehouse",
          "privileges": ["SELECT", "INSERT", "DELETE", "UPDATE", "OWNERSHIP", "GRANT_SELECT"],
        },
        {
          "user": "data-import",
          "catalog": "tpcds",
          "privileges": ["SELECT"],
        },
        # Needed for JDBC clients
        {
          "catalog": "system",
          "schema": "jdbc",
          "privileges": ["SELECT"],
        },
      ],
      "system_information": [],
      "queries": [
        # Users always have permission to view or kill their own queries.
        {
          "allow": ["execute"],
        },
        # {
        #   "user": "admin",
        #   "allow": ["kill", "view"],
        # },
      ],
      "impersonation": [
        {
          "original_user": "superset",
          "new_user": ".*",
          "allow": true,
        },
      ],
      "authorization": [],
      "system_session_properties": [
        {"allow": true},
      ],
      "catalog_session_properties": [
        {"allow": true},
      ],
      "functions": [],
      "procedures": [],
    }

    extra_groups := groups if {
      request := {
        "method": "POST",
        "url": "http://127.0.0.1:9476/user",
        "headers": {"Content-Type": "application/json"},
        "body": {"username": input.context.identity.user},
      }
      response := http.send(request)

      response.status_code == 200

      groups := response.body.groups
    }
