apiVersion: v1
kind: Secret
metadata:
  name: keycloak-clients
stringData:
  userinfoFetcher: "{{ keycloakUserinfoFetcherClientSecret }}"
  superset: "{{ keycloakSupersetClientSecret }}"
  trino: "{{ keycloakTrinoClientSecret }}"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: setup-keycloak
spec:
  template:
    spec:
      containers:
      - name: setup-keycloak
        image: docker.stackable.tech/stackable/testing-tools:0.2.0-stackable0.0.0-dev # We need 0.0.0-dev, so we get kubectl and kcadm
        env:
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-admin-credentials
                key: admin
          - name: USERINFO_FETCHER_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: userinfoFetcher
          - name: SUPERSET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: superset
          - name: TRINO_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: trino
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        command:
          - bash
          - -x
          - -euo
          - pipefail
          - -c
          - |
            COMMON_FLAGS="--config kcadm.conf --truststore /tls/truststore.p12 --trustpass changeit"

            echo "Configuring credentials"
            kcadm.sh config credentials $COMMON_FLAGS --server https://keycloak.$NAMESPACE.svc.cluster.local:8443 --realm master --user admin --password "$KEYCLOAK_ADMIN_PASSWORD"

            echo "Adding users"
            WILLIAM_UUID=$(kcadm.sh create users $COMMON_FLAGS -s username=william.lewis -s firstName=William -s lastName=Lewis    -s email=william.lewis@knab.com -s enabled=true -s emailVerified=true -o | jq -r .id)
            SOPHIA_UUID=$( kcadm.sh create users $COMMON_FLAGS -s username=sophia.clarke -s firstName=Sophia  -s lastName=Clarke   -s email=sophia.clarke@knab.com -s enabled=true -s emailVerified=true -o | jq -r .id)
            DANIEL_UUID=$( kcadm.sh create users $COMMON_FLAGS -s username=daniel.king   -s firstName=Daniel  -s lastName=King     -s email=daniel.king@knab.com   -s enabled=true -s emailVerified=true -o | jq -r .id)
            PAMELA_UUID=$( kcadm.sh create users $COMMON_FLAGS -s username=pamela.scott  -s firstName=Pamela  -s lastName=Scott    -s email=pamela.scott@knab.com  -s enabled=true -s emailVerified=true -o | jq -r .id)
            JUSTIN_UUID=$( kcadm.sh create users $COMMON_FLAGS -s username=justin.martin -s firstName=Justin  -s lastName=Martin   -s email=justin.martin@knab.com -s enabled=true -s emailVerified=true -o | jq -r .id)
            ISLA_UUID=$(   kcadm.sh create users $COMMON_FLAGS -s username=isla.williams -s firstName=Isla    -s lastName=Williams -s email=isla.williams@knab.com -s enabled=true -s emailVerified=true -o | jq -r .id)
            MARK_UUID=$(   kcadm.sh create users $COMMON_FLAGS -s username=mark.ketting  -s firstName=Mark    -s lastName=Ketting  -s email=mark.ketting@knab.com  -s enabled=true -s emailVerified=true -o | jq -r .id)

            echo "Setting user passwords"
            kcadm.sh set-password $COMMON_FLAGS --username william.lewis --new-password "william.lewis"
            kcadm.sh set-password $COMMON_FLAGS --username sophia.clarke --new-password "sophia.clarke"
            kcadm.sh set-password $COMMON_FLAGS --username daniel.king   --new-password "daniel.king"
            kcadm.sh set-password $COMMON_FLAGS --username pamela.scott  --new-password "pamela.scott"
            kcadm.sh set-password $COMMON_FLAGS --username justin.martin --new-password "justin.martin"
            kcadm.sh set-password $COMMON_FLAGS --username isla.williams --new-password "isla.williams"
            kcadm.sh set-password $COMMON_FLAGS --username mark.ketting  --new-password "mark.ketting"

            echo "Creating groups"
            COMPLIANCE_GROUP_UUID=$(      kcadm.sh create groups $COMMON_FLAGS -s name="Compliance and Regulation Analytics" -o | jq -r .id)
            CUSTOMER_SERVICE_GROUP_UUID=$(kcadm.sh create groups $COMMON_FLAGS -s name="Customer Service Analytics"          -o | jq -r .id)
            MARKETING_GROUP_UUID=$(       kcadm.sh create groups $COMMON_FLAGS -s name="Marketing"                           -o | jq -r .id)

            echo "Adding users to groups"
            kcadm.sh update $COMMON_FLAGS "users/$WILLIAM_UUID/groups/$COMPLIANCE_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$SOPHIA_UUID/groups/$COMPLIANCE_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$DANIEL_UUID/groups/$COMPLIANCE_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$PAMELA_UUID/groups/$CUSTOMER_SERVICE_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$JUSTIN_UUID/groups/$CUSTOMER_SERVICE_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$ISLA_UUID/groups/$CUSTOMER_SERVICE_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$MARK_UUID/groups/$MARKETING_GROUP_UUID"

            echo "Creating oauth2 clients"
            kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "userinfo-fetcher",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$USERINFO_FETCHER_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "publicClient": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": true,
              "attributes": {
                "oidc.ciba.grant.enabled": "true",
                "oauth2.device.authorization.grant.enabled": false
              }
            }
            EOF
            kcadm.sh add-roles --uusername service-account-userinfo-fetcher --rolename admin $COMMON_FLAGS

            kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "trino",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$TRINO_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true
            }
            EOF
            kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "superset",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$SUPERSET_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true
            }
            EOF
        volumeMounts:
          - name: tls
            mountPath: /tls
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      volumes:
        - name: tls
          ephemeral:
            volumeClaimTemplate:
              metadata:
                annotations:
                  secrets.stackable.tech/class: tls
                  secrets.stackable.tech/format: tls-pkcs12
                  secrets.stackable.tech/format.compatibility.tls-pkcs12.password: changeit
                  secrets.stackable.tech/scope: pod
              spec:
                storageClassName: secrets.stackable.tech
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "1"
      restartPolicy: OnFailure
  backoffLimit: 20 # give some time for the Keycloak to be available
