---
apiVersion: v1
kind: Secret
metadata:
  name: superset-credentials
type: Opaque
stringData:
  adminUser.username: admin
  adminUser.firstname: Superset
  adminUser.lastname: Admin
  adminUser.email: admin@superset.com
  adminUser.password: will-not-be-used # as we use auth/oidc
  connections.secretKey: {{ supersetSecretKey }}
  connections.sqlalchemyDatabaseUri: postgresql://superset:superset@postgresql-superset/superset
---
apiVersion: superset.stackable.tech/v1alpha1
kind: SupersetCluster
metadata:
  name: superset
spec:
  image:
    productVersion: 2.1.0
    stackableVersion: 23.7.0
  clusterConfig:
    credentialsSecret: superset-credentials
    listenerClass: external-unstable
  nodes:
    roleGroups:
      default:
        replicas: 1
    configOverrides:
      superset_config.py:
        AUTH_TYPE: AUTH_OAUTH
        AUTH_USER_REGISTRATION: "true"
        AUTH_USER_REGISTRATION_ROLE: Gamma_extended
        OAUTH_PROVIDERS: |-
          [
            { 'name': 'keycloak',
              'icon': 'fa-key',
              'token_key': 'access_token',
              'remote_app': {
                'client_id': 'superset',
                'client_secret': f'{os.environ.get("SUPERSET_CLIENT_SECRET")}',
                'api_base_url': f'http://{os.environ.get("KEYCLOAK_ADDRESS")}/realms/gaia-x/protocol/openid-connect',
                'client_kwargs': {
                  'scope': 'email profile openid'
                },
                'access_token_url': f'http://{os.environ.get("KEYCLOAK_ADDRESS")}/realms/gaia-x/protocol/openid-connect/token',
                'authorize_url': f'http://{os.environ.get("KEYCLOAK_ADDRESS")}/realms/gaia-x/protocol/openid-connect/auth',
                'request_token_url': None,
              },
            }
          ]
    podOverrides:
      spec:
        containers:
          - name: superset
            env:
              - name: KEYCLOAK_ADDRESS
                valueFrom:
                  configMapKeyRef:
                    name: keycloak
                    key: KEYCLOAK
              - name: SUPERSET_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: keycloak-client-secrets
                    key: superset
          - name: create-default-role
            image: docker.stackable.tech/stackable/superset:3.1.0-stackable0.0.0-dev
            env:
              - name: SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    key: connections.secretKey
                    name: superset-credentials
              - name: SQLALCHEMY_DATABASE_URI
                valueFrom:
                  secretKeyRef:
                    key: connections.sqlalchemyDatabaseUri
                    name: superset-credentials
            volumeMounts:
              - mountPath: /stackable/config
                name: config
            command:
              - /bin/bash
              - -c
              - |
                mkdir --parents /stackable/app/pythonpath && cp /stackable/config/* /stackable/app/pythonpath
                python - << EOF
                import socket
                import time

                while not socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('localhost', 8088)) == 0:
                    print("Superset not up yet, sleeping ...")
                    time.sleep(1)
                EOF
                superset fab export-roles --path data.json
                python - << EOF
                import json

                with open('data.json') as f:
                    data = json.load(f)

                gamma_permissions = [obj['permissions'] for obj in data if obj['name'] == 'Gamma'][0]
                sql_lab_permissions = [obj['permissions'] for obj in data if obj['name'] == 'sql_lab'][0]

                gamma_extended = [{
                    'name': 'Gamma_extended',
                    'permissions': gamma_permissions + sql_lab_permissions
                }]

                with open('gamma_extended.json', 'w') as f:
                    json.dump(gamma_extended, f)
                EOF
                superset fab import-roles --path gamma_extended.json
                echo "Role imported!"
                sleep infinity
