---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-nifi-ingestion-job
spec:
  template:
    spec:
      serviceAccountName: demo-serviceaccount
      initContainers:
        - name: wait-for-timescale-job-and-nifi
          image: oci.stackable.tech/sdp/tools:1.0.0-stackable0.0.0-dev
          command:
            - bash
            - -euo
            - pipefail
            - -c
            - |
              echo 'Waiting for timescaleDB job to be created'
              until kubectl get job create-timescale-tables-job 2>/dev/null; do sleep 5; done
              kubectl wait --for=create job/create-timescale-tables-job --timeout=30m
              echo 'Waiting for timescaleDB job to be completed'
              kubectl wait --for=condition=complete job/create-timescale-tables-job --timeout=30m

              echo 'Waiting for NiFi to be created'
              kubectl wait --for=create pod/nifi-node-default-0 --timeout=30m
              echo 'Waiting for NiFi to be ready'
              kubectl wait --for=condition=Ready pod/nifi-node-default-0 --timeout=30m
      containers:
        - name: create-nifi-ingestion-job
          image: oci.stackable.tech/sdp/testing-tools:0.2.0-stackable0.0.0-dev
          command:
            - bash
            - -euo
            - pipefail
            - -c
            - python -u /tmp/script/script.py
          volumeMounts:
            - name: script
              mountPath: /tmp/script
            - name: nifi-admin-credentials
              mountPath: /nifi-admin-credentials
            - name: timescale-admin-credentials
              mountPath: /timescale-admin-credentials
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      volumes:
        - name: script
          configMap:
            name: create-nifi-ingestion-job-script
        - name: nifi-admin-credentials
          secret:
            secretName: nifi-admin-credentials
        - name: timescale-admin-credentials
          secret:
            secretName: timescale-admin-credentials
      restartPolicy: OnFailure
  backoffLimit: 50
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: create-nifi-ingestion-job-script
data:
  script.py: |
    from nipyapi.canvas import get_root_pg_id, schedule_process_group, list_all_controllers, schedule_controller, update_controller
    from nipyapi.security import service_login
    import nipyapi
    import os
    import requests
    import urllib3

    # As of 2022-08-29 we cant use "https://nifi:8443" here because <h2>The request contained an invalid host header [<code>nifi:8443</code>] in the request [<code>/nifi-api</code>]. Check for request manipulation or third-party intercept.</h2>
    ENDPOINT = f"https://nifi-node-default-0.nifi-node-default.{os.environ['NAMESPACE']}.svc.cluster.local:8443" # For local testing / developing replace it, afterwards change back to f"https://nifi-node-default-0.nifi-node-default.{os.environ['NAMESPACE']}.svc.cluster.local:8443"
    USERNAME = "admin"
    PASSWORD = open("/nifi-admin-credentials/admin").read()

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    nipyapi.config.nifi_config.host = f"{ENDPOINT}/nifi-api"
    nipyapi.config.nifi_config.verify_ssl = False

    print(f"Logging in as {USERNAME}")
    service_login(username=USERNAME, password=PASSWORD)
    print("Logged in")

    response = requests.get("https://raw.githubusercontent.com/stackabletech/demos/refs/heads/main/demos/signal-processing/DownloadAndWriteToDB.json")

    filename = "/tmp/DownloadAndWriteToDB.json"
    with open(filename, "wb") as f:
        f.write(response.content)

    pg_id = get_root_pg_id()

    if not nipyapi.config.nifi_config.api_client:
        nipyapi.config.nifi_config.api_client = ApiClient()

    header_params = {}
    header_params['Accept'] = nipyapi.config.nifi_config.api_client.select_header_accept(['application/json'])
    header_params['Content-Type'] = nipyapi.config.nifi_config.api_client.select_header_content_type(['multipart/form-data'])

    nipyapi.config.nifi_config.api_client.call_api('/process-groups/{pg_id}/process-groups/upload', 'POST',
        path_params={'pg_id': pg_id},
        header_params=header_params,
        _return_http_data_only=True,
        post_params=[
            ('id', pg_id),
            ('groupName', 'DownloadAndWriteToDB'),
            ('positionX', 100),
            ('positionY', 10),
            ('clientId', nipyapi.nifi.FlowApi().generate_client_id()),
        ],
        files={
            'file': filename
        },
        auth_settings=['tokenAuth'])

    # Update the controller services with the correct password
    for controller in list_all_controllers(pg_id):
        if "Database User" in controller.component.properties:
            controller.component.properties["Password"] = open("/timescale-admin-credentials/password").read()
            controller = update_controller(controller, controller.component)
        schedule_controller(controller, scheduled=True)

    schedule_process_group(pg_id, scheduled=True)
